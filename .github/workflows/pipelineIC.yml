name: Workflow
on:
  push:
    branches:
      - main

jobs:
  SAST:
    runs-on: ubuntu-latest
    steps:
    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'adopt'

    - name: Checkout code
      uses: actions/checkout@v2

    - name: Build Project
      run: |
        chmod +x gradlew
        ./gradlew build

    - name: SonarCloud Setup and Analysis
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        REPO_NAME: ${{ github.event.repository.name }}
      run: |
        # Verificar y crear el proyecto en SonarCloud si no existe
        echo "Verificando o creando el proyecto $REPO_NAME en SonarCloud..."
        response=$(curl -s -o /dev/null -w "%{http_code}" -u "$SONAR_TOKEN:" \
          "https://sonarcloud.io/api/projects/search?projects=$REPO_NAME")

        if [ "$response" -ne 200 ]; then
          create_response=$(curl -s -w "%{http_code}" -o /dev/null -X POST -u "$SONAR_TOKEN:" \
            "https://sonarcloud.io/api/projects/create" \
            -d "name=$REPO_NAME" \
            -d "project=$REPO_NAME" \
            -d "organization=devsecopsusach" \
            -d "visibility=public")
          if [ "$create_response" -ne 201 ] && [ "$create_response" -ne 200 ]; then
            echo "Error inesperado al crear el proyecto (HTTP $create_response)."
            exit 1
          fi
          echo "Estableciendo rama main como predeterminada..."
          curl -s -f -X POST -u "$SONAR_TOKEN:" \
            "https://sonarcloud.io/api/project_branches/rename" \
            -d "name=main" \
            -d "project=$REPO_NAME"
        fi

        # Configurar build.gradle si aplica
        if [ -f "build.gradle" ] && ! grep -q 'id "org.sonarqube" version "3.3"' build.gradle; then
          sed -i '/id '\''java'\''/a \ \ \ \ id '\''org.sonarqube'\'' version '\''3.3'\''' build.gradle
          echo "Plugin de SonarCloud añadido a build.gradle."
        fi

        # Ejecutar análisis inicial y validar Quality Gate
        echo "Ejecutando análisis y validando Quality Gate..."
        ./gradlew sonarqube \
          -Dsonar.projectKey=$REPO_NAME \
          -Dsonar.organization=devsecopsusach \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.login=$SONAR_TOKEN \
          -Dsonar.branch.name=main

        qualityGateStatus=$(curl -s -u "$SONAR_TOKEN:" \
          "https://sonarcloud.io/api/qualitygates/project_status?projectKey=$REPO_NAME" | jq -r '.projectStatus.status')

        if [ "$qualityGateStatus" != "OK" ]; then
          echo "El proyecto no cumple con el Quality Gate: $qualityGateStatus."
          exit 1
        fi
        echo "El proyecto cumple con el Quality Gate."
