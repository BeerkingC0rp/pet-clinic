name: Workflow
on:
  push:
    branches:
      - feature-clase1

jobs:
  SAST:
    runs-on: ubuntu-latest
    steps:
    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'adopt'

    - name: Checkout code
      uses: actions/checkout@v2

    - name: Build Project
      run: |
        chmod +x gradlew
        ./gradlew build

    - name: Validate SonarCloud Project
      id: sonarcloud-validate
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        REPO_NAME: ${{ github.event.repository.name }}
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" -u "$SONAR_TOKEN:" \
            "https://sonarcloud.io/api/projects/search?projects=$REPO_NAME")

          if [ "$response" -eq 200 ]; then
            echo "El proyecto $REPO_NAME ya existe en SonarCloud."
            echo "proyectoExiste=1" >> $GITHUB_ENV
          else
            echo "Intentando crear el proyecto $REPO_NAME en SonarCloud..."
            create_response=$(curl -s -w "%{http_code}" -o /dev/null -X POST -u "$SONAR_TOKEN:" \
              "https://sonarcloud.io/api/projects/create" \
              -d "name=$REPO_NAME" \
              -d "project=$REPO_NAME" \
              -d "organization=devsecopsusach" \
              -d "visibility=public")

            if [ "$create_response" -eq 400 ]; then
              echo "El proyecto ya existe según la respuesta de creación (HTTP 400). Continuando..."
              echo "proyectoExiste=1" >> $GITHUB_ENV
            elif [ "$create_response" -eq 201 ]; then
              echo "El proyecto $REPO_NAME fue creado exitosamente en SonarCloud."
              echo "proyectoExiste=0" >> $GITHUB_ENV

              echo "Estableciendo rama main como rama por defecto..."
              curl -s -f -X POST -u "$SONAR_TOKEN:" \
                "https://sonarcloud.io/api/project_branches/rename" \
                -d "name=main" \
                -d "project=$REPO_NAME"
            else
              echo "Error inesperado al intentar crear el proyecto. Respuesta HTTP: $create_response"
              exit 1
            fi
          fi


    - name: Validate and Update Gradle for SonarCloud
      if: env.proyectoExiste == '1'
      run: |
        if [ -f "build.gradle" ]; then
          if ! grep -q 'id "org.sonarqube" version "3.3"' build.gradle; then
            sed -i '/id '\''java'\''/a \ \ \ \ id '\''org.sonarqube'\'' version '\''3.3'\''' build.gradle
            echo "Plugin de SonarCloud añadido a build.gradle."
          else
            echo "Plugin de SonarCloud ya presente en build.gradle."
          fi
        else
          echo "No se encontró build.gradle. Tipo de proyecto desconocido."
        fi

    - name: Validate SonarQube Plugin
      run: |
        if ! grep -q 'id "org.sonarqube"' build.gradle; then
          echo "El plugin de SonarQube no está configurado en build.gradle. Añadiéndolo..."
          sed -i '/id '\''java'\''/a \ \ \ \ id '\''org.sonarqube'\'' version '\''3.3'\''' build.gradle
        else
          echo "El plugin de SonarQube ya está configurado."
        fi
    
    - name: Run SonarQube Analysis
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        REPO_NAME: ${{ github.event.repository.name }}
      run: |
        ./gradlew sonarqube \
          -Dsonar.projectKey=$REPO_NAME \
          -Dsonar.organization=devsecopsusach \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.login=$SONAR_TOKEN

    - name: Validate Quality Gate
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        REPO_NAME: ${{ github.event.repository.name }}
      run: |
        analysisId=$(curl -s -u "$SONAR_TOKEN:" \
          "https://sonarcloud.io/api/ce/component?component=$REPO_NAME" | jq -r '.current.analysisId')

        qualityGateStatus=$(curl -s -u "$SONAR_TOKEN:" \
          "https://sonarcloud.io/api/qualitygates/project_status?analysisId=$analysisId" | jq -r '.projectStatus.status')

        if [ "$qualityGateStatus" == "OK" ]; then
          echo "El proyecto cumple con el Quality Gate."
        else
          echo "El proyecto no cumple con el Quality Gate. Estado: $qualityGateStatus"
          exit 1
        fi

